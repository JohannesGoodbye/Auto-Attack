plugins {
    id 'com.gradleup.shadow'
}

architectury {
    platformSetupLoomIde()
    neoForge()
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentNeoForge.extendsFrom common

    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

repositories {
    maven {
        name = 'NeoForged'
        url = 'https://maven.neoforged.net/releases'
    }
}

dependencies {
    neoForge "net.neoforged:neoforge:$rootProject.neoforge_version"

    // Architectury API. This is optional, and you can comment it out if you don't need it.
    // if added again, uncomment the architectury dependency in neoforge.mods.toml
//    modImplementation "dev.architectury:architectury-neoforge:$rootProject.architectury_api_version"

//    modCompileOnly("me.shedaniel.cloth:cloth-config-neoforge:$rootProject.cloth_config_version")
    modRuntimeOnly("me.shedaniel.cloth:cloth-config-neoforge:$rootProject.cloth_config_version")

    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowBundle project(path: ':common', configuration: 'transformProductionNeoForge')
}

processResources {
    inputs.properties([
            mod_name: mod_name,
            mod_description: mod_description,
            mod_authors: mod_authors,
            mod_license: mod_license,
            version: version
    ])

    filesMatching('META-INF/neoforge.mods.toml') {
        expand([
                mod_name: mod_name,
                mod_description: mod_description,
                mod_authors: mod_authors,
                mod_license: mod_license,
                version: version
        ])
    }
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    inputFile.set shadowJar.archiveFile
}
