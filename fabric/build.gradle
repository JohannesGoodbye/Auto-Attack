plugins {
    id 'com.gradleup.shadow'
}

loom {
    accessWidenerPath = file("src/main/resources/auto_attack.accesswidener")
}

repositories {
    mavenCentral()
    maven {
        name = "Shedaniel Maven"
        url = "https://maven.shedaniel.me"
    }
    maven {
        name = "TerraformersMC"
        url = "https://maven.terraformersmc.com/"
    }
}

architectury {
    platformSetupLoomIde()
    fabric()
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common

    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:$rootProject.fabric_loader_version"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:$rootProject.fabric_api_version"

    // Architectury API. This is optional, and you can comment it out if you don't need it.
    // if added again, add this to fabric.mod.json inside dependes:     "architectury": ">=17.0.6"
//    modImplementation "dev.architectury:architectury-fabric:$rootProject.architectury_api_version"

//    modCompileOnly("me.shedaniel.cloth:cloth-config-fabric:$rootProject.cloth_config_version")
    modRuntimeOnly("me.shedaniel.cloth:cloth-config-fabric:$rootProject.cloth_config_version")
    modCompileOnly("com.terraformersmc:modmenu:$rootProject.modmenu_version")
    modRuntimeOnly("com.terraformersmc:modmenu:$rootProject.modmenu_version")

    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowBundle project(path: ':common', configuration: 'transformProductionFabric')
}

processResources {
    inputs.properties([
            mod_name: mod_name,
            mod_description: mod_description,
            mod_authors: mod_authors,
            mod_license: mod_license,
            version: version
    ])

    filesMatching('fabric.mod.json') {
        expand([
                mod_name: mod_name,
                mod_description: mod_description,
                mod_authors: mod_authors,
                mod_license: mod_license,
                version: version
        ])
    }
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    inputFile.set shadowJar.archiveFile
}
